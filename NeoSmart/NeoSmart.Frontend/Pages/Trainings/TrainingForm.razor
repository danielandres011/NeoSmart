@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

<div class="col-md-4">
    <div class="card widget-inline">
        <div class="card-body">
            <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <div class="form-group">
                        <label class="control-label">Tema:</label>
                        <InputText class="form-control" @bind-Value="@Training.Name" />
                        <ValidationMessage For="@(() => Training.Name)" />
                    </div>
                </div>
                <div class="form-group mt-2">
                    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
                    <button class="btn btn-primary" type="submit">Guardar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Training);
    }

    [EditorRequired]
    [Parameter]
    public Training Training { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
