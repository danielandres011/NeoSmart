@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

@* <div class="col-md-4"> *@
<div class="card widget-inline">
    <div class="card-body">
        <EditForm EditContext="editContext" OnValidSubmit="OnDataAnnotationsValidatedAsync">
            <DataAnnotationsValidator />
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="Formation-tab" data-bs-toggle="tab" data-bs-target="#Formation" type="button" role="tab" aria-controls="Formation" aria-selected="true">Formación</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="FormationTopics-tab" data-bs-toggle="tab" data-bs-target="#FormationTopics" type="button" role="tab" aria-controls="FormationTopics" aria-selected="false">Temas</button>
                </li>
               
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="Formation" role="tabpanel" aria-labelledby="Formation-tab">
                    <div class="row">
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <label class="control-label">Código:</label>
                            <InputText class="form-control" @bind-Value="@FormationDTO.Cod" />
                            <ValidationMessage For="@(() => FormationDTO.Cod)" />
                        </div>
                        <div class="form-group mb-2">
                            <label class="control-label">Descripción:</label>
                                <InputTextArea class="form-control" @bind-Value="@FormationDTO.Description" />
                            <ValidationMessage For="@(() => FormationDTO.Description)" />
                            <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado:</label>
                        </div>
                    </div>
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <label>Cargo:</label>
                            <select class="form-select" @bind="FormationDTO.OccupationId">
                                <option value="0">-- Seleccione un cargo --</option>
                                @if (occupations is not null)
                                {
                                    @foreach (var occupation in occupations)
                                    {
                                        if (FormationDTO.OccupationId != 0)
                                        {
                                            <option value="@occupation.Id" selected="@(occupation.Id == FormationDTO.Occupation!.Id)">@occupation.Description</option>
                                        }
                                        else
                                        {
                                            <option value="@occupation.Id">@occupation.Description</option>
                                        }
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => FormationDTO.OccupationId)" />
                        </div>
                    </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="FormationTopics" role="tabpanel" aria-labelledby="FormationTopics-tab">
                    <div class="col-12 p-2">
                        <MultipleSelector NonSelected="nonSelected" Selected="selected" />
                    </div>
                </div>
            </div>
            
            <div class="form-group mt-2">
                <button class="btn btn-outline-success" @onclick="ReturnAction">Regresar</button>
                <button class="btn btn-primary" type="submit">Guardar</button>
            </div>
        </EditForm>
    </div>
</div>
@* </div> *@

@code {
    private EditContext editContext = null!;
    private List<Occupation>? occupations;
    private List<MultipleSelectorModel> selected { get; set; } = new();
    private List<MultipleSelectorModel> nonSelected { get; set; } = new();
    private bool loading;
    bool StatusValue
    {
        get => Convert.ToBoolean(FormationDTO.Status);
        set => FormationDTO.Status = value;
    }

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public FormationDTO FormationDTO { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public List<Topic> SelectedTopics { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<Topic> NonSelectedTopics { get; set; } = new();

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(FormationDTO);
        await LoadOccupationsAsync();

        selected = SelectedTopics.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
        nonSelected = NonSelectedTopics.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
    }

    private async Task LoadOccupationsAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<Occupation>>("/api/occupations/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        occupations = responseHttp.Response;
        loading = false;
    }

    private async Task OnDataAnnotationsValidatedAsync()
    {
        FormationDTO.FormationTopicIds = selected.Select(x => int.Parse(x.Key)).ToList();
        await OnValidSubmit.InvokeAsync();
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
